!(function (t, e) { if (typeof exports === 'object' && typeof module === 'object')module.exports = e(require('jquery')); else if (typeof define === 'function' && define.amd)define(['jquery'], e); else { var n = typeof exports === 'object' ? e(require('jquery')) : e(t.jquery); for (var s in n)(typeof exports === 'object' ? exports : t)[s] = n[s]; } }(window, (function (t) {
  return (function (t) { var e = {}; function n(s) { if (e[s]) return e[s].exports; var i = e[s] = { i: s, l: !1, exports: {} }; return t[s].call(i.exports, i, i.exports, n), i.l = !0, i.exports; } return n.m = t, n.c = e, n.d = function (t, e, s) { n.o(t, e) || Object.defineProperty(t, e, { enumerable: !0, get: s }); }, n.r = function (t) { typeof Symbol !== 'undefined' && Symbol.toStringTag && Object.defineProperty(t, Symbol.toStringTag, { value: 'Module' }), Object.defineProperty(t, '__esModule', { value: !0 }); }, n.t = function (t, e) { if (1 & e && (t = n(t)), 8 & e) return t; if (4 & e && typeof t === 'object' && t && t.__esModule) return t; var s = Object.create(null); if (n.r(s), Object.defineProperty(s, 'default', { enumerable: !0, value: t }), 2 & e && typeof t !== 'string') for (var i in t)n.d(s, i, function (e) { return t[e]; }.bind(null, i)); return s; }, n.n = function (t) { var e = t && t.__esModule ? function () { return t.default; } : function () { return t; }; return n.d(e, 'a', e), e; }, n.o = function (t, e) { return Object.prototype.hasOwnProperty.call(t, e); }, n.p = '', n(n.s = 5); }([function (t, e, n) {
    function s(t, e) { t.addClass('hidden'); const n = e.defaultOptions.state === 'Expanded' ? 'active' : null; const s = u('span', 'multiselect__title'); const i = u('div', n === null ? 'multiselect' : ['multiselect', n]); i.tabIndex = -1; const o = u('div', 'multiselect__content'); const a = u('div', 'multiselect__arrow'); return a.classList.add('icon'), s.textContent = e.defaultOptions.title, i.insertAdjacentElement('beforeend', s), i.insertAdjacentElement('beforeend', a), i.insertAdjacentElement('beforeend', o), t[0].insertAdjacentElement('afterend', i), e.defaultOptions.options.forEach((t, e)=>{ o.insertAdjacentElement('beforeend', (function (t, e) { const n = u('div', 'option'); n.dataset.id = e.toString(); const s = u('div', 'option__text'); const i = u('div', 'option__counter'); return s.textContent = t.text, i.innerHTML = `\n        <button class="${+t.value == 0 ? 'disabled' : ''}">-</button><span>${t.value}</span><button>+</button>\n    `, n.insertAdjacentElement('beforeend', s), n.insertAdjacentElement('beforeend', i), n; }(t, e))); }), o.insertAdjacentElement('beforeend', (function () { const t = u('div', ['multiselect__buttons', 'off']); return t.innerHTML = '\n        <button class="clear__button">очистить</button><button class="apply__button">применить</button>\n    ', t; }())), l(i, e.options), i; } function i(t, e, n) { const s = t.querySelector(`.option[data-id="${n}"]`); const i = s == null ? void 0 : s.querySelector('.option__counter span'); const o = s == null ? void 0 : s.querySelector('.option__text'); const a = s == null ? void 0 : s.querySelector('.option__counter button:first-of-type'); i.textContent = e.value, o.textContent = e.text, a.classList.toggle('disabled', +e.value == 0); } function o(t, e, n) { const s = t[0].querySelectorAll('option')[n]; s.value = e.value, s.textContent = e.text; } function a(t, e) { t.querySelector('span.multiselect__title').textContent = e; } function l(t, e) { e.showAllValue ? (function (t, e, n) { let s = ''; e.forEach(t=>s += +t.value > 0 ? `${t.value} ${t.text}, ` : ''), a(t, s.length > 20 ? s.substring(0, 20) + '...' : s.length === 0 ? n : s.substring(0, s.length - 2)); }(t, e.options, e.title)) : (function (t, e, n, s) { let i = 0; e.forEach(t=>i += +t.value), a(t, i > 0 ? `${i} ${n}` : s); }(t, e.options, e.totalTextTitle, e.title)); } function r(t, e, n) { if (t === 'state' || t === 'title') return e[t] !== n[t]; if (t === 'options') { if (e.options.length !== n.options.length) return !0; return void 0 !== e.options.find((t, e)=>n.options[e].value !== t.value || n.options[e].text !== t.text); } return !1; } function c(t, e) { const n = t.querySelector('.multiselect__buttons'); const s = t.querySelector('.clear__button'); const i = t.querySelector('.apply__button'); s.classList.toggle('active', e.clear), i.classList.toggle('active', e.apply), n.classList.toggle('off', !e.clear && !e.apply); } function u(t, e) { const n = document.createElement(t); return e && typeof e === 'string' ? n.classList.add(e) : e && n.classList.add(...e), n; }n.d(e, 'c', (function () { return s; })), n.d(e, 'e', (function () { return i; })), n.d(e, 'g', (function () { return o; })), n.d(e, 'f', (function () { return a; })), n.d(e, 'a', (function () { return l; })), n.d(e, 'b', (function () { return r; })), n.d(e, 'd', (function () { return c; }));
  }, function (e, n) { e.exports = t; }, function (t, e, n) {
    (function (t) {
      n.d(e, 'a', (function () { return o; })); var s = n(3); var i = n(4); class o {
        constructor(e, n) { this.updateModelHandler = e=>{ var n; const s = e.target; const i = t(this.view.mask).has(s).length !== 0 || t(this.view.mask).is(s); if (e.type !== 'blur') if (s && i && s instanceof HTMLButtonElement && s.classList.contains('apply__button')) this.model.updateData('save'); else if (s && i && s instanceof HTMLButtonElement && s.classList.contains('clear__button')) this.model.updateData('clear'); else if (s && i && s instanceof HTMLButtonElement && s.classList.length === 0) { const t = ((n = s.parentNode) === null || void 0 === n ? void 0 : n.parentNode).dataset.id; const e = s.innerHTML; this.model.updateData(t, e); } else if (s && i && s instanceof HTMLDivElement && s.classList.contains('multiselect') && s.classList.contains('active')) this.model.updateData('state', 'Collapsed'); else if (s && i && s instanceof HTMLDivElement && s.classList.contains('multiselect') && !s.classList.contains('active')) this.model.updateData('state', 'Expanded'); else { if (s && i && (s.classList.contains('multiselect__title') || s.classList.contains('multiselect__arrow'))) { const t = s.parentNode; if (t && t.classList.contains('multiselect') && t.classList.contains('active')) return void this.model.updateData('state', 'Collapsed'); if (s && t.classList.contains('multiselect') && !t.classList.contains('active')) return void this.model.updateData('state', 'Expanded'); }s && this.view.mask.classList.contains('active') && !i && this.model.updateData('state', 'Collapsed'); } else this.model.updateData('state', 'Collapsed'); }, this.model = new i.a(n), this.view = new s.a(e, this.model), this.view.bindChangeModelHandler(this.updateModelHandler); }

        getModel() { return this.model; }
      }
    }).call(this, n(1));
  }, function (t, e, n) {
    (function (t) {
      n.d(e, 'a', (function () { return i; })); var s = n(0); class i {
        constructor(t, e) { this.updateView = (t, e, n)=>{ Object(s.d)(this.mask, n), Object.keys(t).forEach(n=>{ if (Object(s.b)(n, t, e)) switch (n) { case 'state': return void this.mask.classList.toggle('active', t.state === 'Expanded'); case 'options': return t.options.forEach((t, e)=>{ Object(s.e)(this.mask, t, e), Object(s.g)(this.view, t, e); }), void Object(s.a)(this.mask, t); case 'title': return void Object(s.f)(this.mask, t.title); } }); }, this.model = e, this.view = t, this.unsub = this.model.subscribe(this.updateView), this.mask = Object(s.c)(t, e), this.model.defaultOptions.state === 'Expanded' && this.mask.focus(); }

        bindChangeModelHandler(e) { this.mask.addEventListener('click', e), this.mask.addEventListener('blur', e), this.mask.querySelectorAll('button').forEach(e=>{ t(e).on('mousedown', (function () { return !1; })); }); }
      }
    }).call(this, n(1));
  }, function (t, e, n) {
    n.d(e, 'a', (function () { return s; })); class s {
      constructor(t) { this.defaultOptions = t, this.options = JSON.parse(JSON.stringify(this.defaultOptions)), this.clearIsActive = this.isActiveClear(this.options.options), this.applyIsActive = !1, this.tempCondition = JSON.parse(JSON.stringify(this.defaultOptions.options)); }

      subscribe(t) { return this.observer = t, { unsubscribe: ()=>{ this.observer = void 0; } }; }

      setData(t, e) { e && (this.tempCondition = t.options), this.clearIsActive = this.isActiveClear(t.options); const n = JSON.parse(JSON.stringify(this.options)); this.options = Object.assign({}, this.options, t), typeof this.observer === 'function' && this.observer(this.options, n, { clear: this.clearIsActive, apply: this.applyIsActive }); }

      getDefaultOptions() { return Object.assign({}, this.defaultOptions); }

      isActiveClear(t) { return void 0 !== t.find(t=>+t.value > 0); }

      updateData(t, e) { if (t !== 'state' || e !== 'Expanded' && e !== 'Collapsed') if (t === 'save') this.applyIsActive = !1, this.tempCondition = JSON.parse(JSON.stringify(this.options.options)), this.setData(this.options); else if (t === 'clear') { this.applyIsActive = !0; const t = JSON.parse(JSON.stringify(this.options)); t.options.forEach(t=>t.value = '0'), this.setData(t); } else { this.applyIsActive = !0; const n = JSON.parse(JSON.stringify(this.options)); let s = +n.options[+t].value; e === '+' ? s++ : s--, s < 0 && (s = 0), n.options[+t].value = s.toString(), this.setData(n); } else { this.applyIsActive = !1; const t = JSON.parse(JSON.stringify(this.options)); t.state = e, t.options = JSON.parse(JSON.stringify(this.tempCondition)), this.setData(t); } }
    }
  }, function (t, e, n) {
    n.r(e), function (t) {
      var e = n(2); !(function (t) {
        const n = {
          state: 'Collapsed', options: [{ text: 'спальни', value: '0' }, { text: 'кровати', value: '0' }, { text: 'ванные комнаты', value: '0' }], title: 'Сколько комнат', showAllValue: !1, totalTextTitle: 'комнаты'
        }; const s = { init: (t, n)=>{ t.data('multiselect', new e.a(t, n)); }, update: (t, e)=>{ t.data('multiselect').getModel().setData(e, !0); }, destroy: t=>{ t.data('multiselect').destroy(), t.removeData('multiselect'); } }; t.fn.multiselect = function (e) { let i; const o = this.data('multiselect'); if (typeof e === 'string' && e === 'update')s[e].apply(this, [this, arguments[1]]); else if (typeof e === 'string' && e === 'destroy')s[e](this); else if (typeof e === 'boolean')i = o; else { const i = t.extend({}, n, e); s.init.apply(this, [this, i]); } return i || this; };
      }(t));
    }.call(this, n(1));
  }]));
})));
